[{"name":"g.txt","grammarSpec":"ADDOP -> [-+]\nMULOP -> [*/]\nNUM -> \\d+\nLP -> [(]\nRP -> [)]\nID -> \\w+\n\nS -> expr \nexpr -> term expr'\nexpr' -> ADDOP term expr' | lambda\nterm -> factor term'\nterm' -> MULOP factor term' | lambda\nfactor -> id_or_func_call | NUM | LP expr RP\nid_or_func_call -> ID id_or_func_call'\nid_or_func_call' -> lambda | LP RP\n","table":{"S":{"NUM":[["expr"]],"LP":[["expr"]],"ID":[["expr"]]},"expr":{"NUM":[["term","expr'"]],"LP":[["term","expr'"]],"ID":[["term","expr'"]]},"expr'":{"ADDOP":[["ADDOP","term","expr'"]],"$":[[]],"RP":[[]]},"term":{"NUM":[["factor","term'"]],"LP":[["factor","term'"]],"ID":[["factor","term'"]]},"term'":{"MULOP":[["MULOP","factor","term'"]],"ADDOP":[[]],"$":[[]],"RP":[[]]},"factor":{"ID":[["id_or_func_call"]],"NUM":[["NUM"]],"LP":[["LP","expr","RP"]]},"id_or_func_call":{"ID":[["ID","id_or_func_call'"]]},"id_or_func_call'":{"MULOP":[[]],"ADDOP":[[]],"$":[[]],"RP":[[]],"LP":[["LP","RP"]]}},"nonterminals":["S","expr","expr'","term","term'","factor","id_or_func_call","id_or_func_call'"],"terminals":["ADDOP","MULOP","NUM","LP","RP","ID","WHITESPACE"]},{"name":"g10.txt","grammarSpec":"NUM -> \\d+\nID -> [A-Za-z]\\w*\nLP -> [(]\nRP -> [)]\nCOMMA -> ,\nADDOP -> [-+]\nMULOP -> [*/]\nEQ -> =\nSEMI -> ;\n\nprogram -> stmt SEMI program | stmt\nstmt -> assign | expr | lambda\nassign -> tuple EQ tuple2\ntuple -> tuple COMMA expr | expr \ntuple2 -> tuple2 COMMA expr | expr \nexpr -> expr ADDOP term | term\nterm -> term MULOP factor | factor\nfactor -> ID | LP expr RP | NUM\n","table":{"program":{"ID":[["stmt","SEMI","program"],["stmt"]],"LP":[["stmt","SEMI","program"],["stmt"]],"NUM":[["stmt","SEMI","program"],["stmt"]],"SEMI":[["stmt","SEMI","program"]],"$":[["stmt"]]},"stmt":{"ID":[["assign"],["expr"]],"LP":[["assign"],["expr"]],"NUM":[["assign"],["expr"]],"SEMI":[[]],"$":[[]]},"assign":{"ID":[["tuple","EQ","tuple2"]],"LP":[["tuple","EQ","tuple2"]],"NUM":[["tuple","EQ","tuple2"]]},"tuple":{"ID":[["tuple","COMMA","expr"],["expr"]],"LP":[["tuple","COMMA","expr"],["expr"]],"NUM":[["tuple","COMMA","expr"],["expr"]]},"tuple2":{"ID":[["tuple2","COMMA","expr"],["expr"]],"LP":[["tuple2","COMMA","expr"],["expr"]],"NUM":[["tuple2","COMMA","expr"],["expr"]]},"expr":{"ID":[["expr","ADDOP","term"],["term"]],"LP":[["expr","ADDOP","term"],["term"]],"NUM":[["expr","ADDOP","term"],["term"]]},"term":{"ID":[["term","MULOP","factor"],["factor"]],"LP":[["term","MULOP","factor"],["factor"]],"NUM":[["term","MULOP","factor"],["factor"]]},"factor":{"ID":[["ID"]],"LP":[["LP","expr","RP"]],"NUM":[["NUM"]]}},"nonterminals":["program","stmt","assign","tuple","tuple2","expr","term","factor"],"terminals":["NUM","ID","LP","RP","COMMA","ADDOP","MULOP","EQ","SEMI","WHITESPACE"]},{"name":"g11.txt","grammarSpec":"ACT -> \\bact\\b\nROMAN_NUMERAL -> \\b(I{1,3}|IV|VI{0,3}|I?X)\\b\nADJ -> \\b(lovely|ugly|pretty|foul|handsome|disgusting)\\b\nYOU -> \\byou\\b\nARE -> are\nAS -> as\nA -> \\ba\\b\nNOUN -> \\b(king|queen|noble|crown)\\b\nACTOR -> \\b(Romeo|Juliet)\\b\nLB -> \\[\nRB -> \\]\nENTER -> enter\nEXIT -> exit\nIS -> is\nQM -> \\?\nIF -> if\nSO -> so\nCMA -> ,\nLET -> let\nUS -> us\nPROCEED -> proceed\nTO -> to\nSCENE -> scene\nOPEN -> open\nYOUR -> your\nHEART -> heart\nSPEAK -> speak\nMIND -> mind\nPUNC -> [.!]\nCOLON -> :\n\nprogram -> ACT ROMAN_NUMERAL scene_list \nadj_list -> ADJ adj_list | lambda\nassign_sentence -> YOU ARE AS ADJ AS A adj_list NOUN\nbody_list -> body_stmt body_list | lambda\nbody_stmt -> ACTOR COLON sentence_list | LB ENTER ACTOR RB | LB EXIT ACTOR RB\ncomparison_sentence -> IS ACTOR AS ADJ AS ACTOR QM\nconditional_sentence -> IF SO CMA sentence\ngoto_sentence -> LET US PROCEED TO SCENE ROMAN_NUMERAL\nio_sentence -> OPEN YOUR HEART | SPEAK YOUR MIND\nscene_list -> SCENE ROMAN_NUMERAL body_list scene_list | lambda\nsentence_list -> sentence PUNC sentence_list | lambda\nsentence -> io_sentence | assign_sentence | comparison_sentence | goto_sentence | conditional_sentence\n","table":{"program":{"ACT":[["ACT","ROMAN_NUMERAL","scene_list"]]},"adj_list":{"ADJ":[["ADJ","adj_list"]],"NOUN":[[]]},"assign_sentence":{"YOU":[["YOU","ARE","AS","ADJ","AS","A","adj_list","NOUN"]]},"body_list":{"ACTOR":[["body_stmt","body_list"]],"LB":[["body_stmt","body_list"]],"SCENE":[[]],"$":[[]]},"body_stmt":{"ACTOR":[["ACTOR","COLON","sentence_list"]],"LB":[["LB","ENTER","ACTOR","RB"],["LB","EXIT","ACTOR","RB"]]},"comparison_sentence":{"IS":[["IS","ACTOR","AS","ADJ","AS","ACTOR","QM"]]},"conditional_sentence":{"IF":[["IF","SO","CMA","sentence"]]},"goto_sentence":{"LET":[["LET","US","PROCEED","TO","SCENE","ROMAN_NUMERAL"]]},"io_sentence":{"OPEN":[["OPEN","YOUR","HEART"]],"SPEAK":[["SPEAK","YOUR","MIND"]]},"scene_list":{"SCENE":[["SCENE","ROMAN_NUMERAL","body_list","scene_list"]],"$":[[]]},"sentence_list":{"OPEN":[["sentence","PUNC","sentence_list"]],"SPEAK":[["sentence","PUNC","sentence_list"]],"YOU":[["sentence","PUNC","sentence_list"]],"IS":[["sentence","PUNC","sentence_list"]],"LET":[["sentence","PUNC","sentence_list"]],"IF":[["sentence","PUNC","sentence_list"]],"ACTOR":[[]],"LB":[[]],"SCENE":[[]],"$":[[]]},"sentence":{"OPEN":[["io_sentence"]],"SPEAK":[["io_sentence"]],"YOU":[["assign_sentence"]],"IS":[["comparison_sentence"]],"LET":[["goto_sentence"]],"IF":[["conditional_sentence"]]}},"nonterminals":["program","adj_list","assign_sentence","body_list","body_stmt","comparison_sentence","conditional_sentence","goto_sentence","io_sentence","scene_list","sentence_list","sentence"],"terminals":["ACT","ROMAN_NUMERAL","ADJ","YOU","ARE","AS","A","NOUN","ACTOR","LB","RB","ENTER","EXIT","IS","QM","IF","SO","CMA","LET","US","PROCEED","TO","SCENE","OPEN","YOUR","HEART","SPEAK","MIND","PUNC","COLON","WHITESPACE"]},{"name":"g12.txt","grammarSpec":"x -> x\n\nS -> A\nA -> B\nB -> C\nC -> D\nD -> E\nE -> x | lambda\n","table":{"S":{"x":[["A"]],"$":[["A"]]},"A":{"x":[["B"]],"$":[["B"]]},"B":{"x":[["C"]],"$":[["C"]]},"C":{"x":[["D"]],"$":[["D"]]},"D":{"x":[["E"]],"$":[["E"]]},"E":{"x":[["x"]],"$":[[]]}},"nonterminals":["S","A","B","C","D","E"],"terminals":["x","WHITESPACE"]},{"name":"g2.txt","grammarSpec":"x -> x\n\nS -> lambda | x S x\n","table":{"S":{"$":[[]],"x":[[],["x","S","x"]]}},"nonterminals":["S"],"terminals":["x","WHITESPACE"]},{"name":"g3.txt","grammarSpec":"x -> x\n\nS -> x | x S x\n","table":{"S":{"x":[["x"],["x","S","x"]]}},"nonterminals":["S"],"terminals":["x","WHITESPACE"]},{"name":"g4.txt","grammarSpec":"x -> x\n\nS -> A | B x | C\nA -> B x | C\nB -> C x | C\nC -> lambda | C | x\n","table":{"S":{"x":[["A"],["B","x"],["C"]],"$":[["A"],["C"]]},"A":{"x":[["B","x"],["C"]],"$":[["C"]]},"B":{"x":[["C","x"],["C"]]},"C":{"$":[[],["C"]],"x":[[],["C"],["x"]]}},"nonterminals":["S","A","B","C"],"terminals":["x","WHITESPACE"]},{"name":"g5.txt","grammarSpec":"x -> x\n\nS -> A | B x | C\nA -> B x \nB -> C x | C\nC -> lambda | C | x\n","table":{"S":{"x":[["A"],["B","x"],["C"]],"$":[["C"]]},"A":{"x":[["B","x"]]},"B":{"x":[["C","x"],["C"]]},"C":{"$":[[],["C"]],"x":[[],["C"],["x"]]}},"nonterminals":["S","A","B","C"],"terminals":["x","WHITESPACE"]},{"name":"g6.txt","grammarSpec":"ADDOP -> [+]\nAND -> \\band\\b\nCMA -> ,\nCOMMENT -> //[^\\n]*\nDEF -> \\bdef\\b\nELSE -> \\belse\\b\nEQ -> =\nIF -> \\bif\\b\nLB -> \\[\nLBR -> [{]\nLP -> [(]\nMINUS -> -\nMULOP -> [*/]\nNOT -> \\bnot\\b\nNUM -> -?(\\d+|\\d+\\.\\d*|\\.\\d+)([Ee][-+]?\\d+)?\nNUMBER -> \\bnum\\b\nOR -> \\bor\\b\nPRINT -> \\bprint\\b\nRB -> \\]\nRBR -> [}]\nRP -> [)]\nRELOP -> >=|<=|!=|==|>|<\nRETURN -> \\breturn\\b\nSEMI -> ;\nSHIFT -> \\bshift\\b\nSTRING -> \\bstring\\b\nSTRING-CONSTANT -> \"(\\\\\"|[^\"])*\" | '(\\\\'|[^'])*'\nVAR -> \\bvar\\b\nWHILE -> \\bwhile\\b\nID -> [A-Za-z_]\\w*\n\nprogram -> var-decl-list func-decl-list\nfunc-decl-list -> func-decl func-decl-list | lambda\nfunc-decl -> DEF ID LP type-list RP optional-return-spec brace-block\noptional-return-spec -> RETURN type | lambda\nbrace-block -> LBR var-decl-list stmts RBR\ntype-list -> lambda | ID type type-list'\ntype-list' -> CMA ID type type-list' | lambda\ntype -> non-array-type | non-array-type LB size-list RB\nnon-array-type -> NUMBER | STRING\nsize-list -> NUM | NUM CMA size-list\nstmts -> stmt SEMI stmts | lambda\nstmt -> assign SEMI | func-call SEMI | loop | cond | return-stmt SEMI\nreturn-stmt -> RETURN | RETURN expr\nfunc-call -> ID LP optional-expr-list RP | builtin-func-call\nbuiltin-func-call -> PRINT LP expr-list RP | SHIFT LP expr CMA expr RP\noptional-expr-list -> lambda | expr-list\nexpr-list ->  expr expr-list'\nexpr-list' -> lambda | CMA expr expr-list'\nloop -> WHILE LP expr RP brace-block\ncond -> IF expr brace-block | IF expr brace-block ELSE brace-block\nvar-decl-list -> var-decl SEMI var-decl-list | lambda\nvar-decl -> VAR ID type\nexpr -> orexp\norexp -> orexp OR andexp | andexp\nandexp -> andexp AND notexp | notexp\nnotexp -> NOT notexp | rel\nrel -> sum RELOP sum | sum\nsum -> sum ADDOP term | sum MINUS term | term\nterm -> term MULOP neg | neg\nneg -> MINUS neg | factor\nfactor -> ID | NUM | LP expr RP | func-call | ID LB expr-list RB | STRING-CONSTANT\nassign -> ID EQ expr\n","table":{"program":{"VAR":[["var-decl-list","func-decl-list"]],"DEF":[["var-decl-list","func-decl-list"]],"$":[["var-decl-list","func-decl-list"]]},"func-decl-list":{"DEF":[["func-decl","func-decl-list"]],"$":[[]]},"func-decl":{"DEF":[["DEF","ID","LP","type-list","RP","optional-return-spec","brace-block"]]},"optional-return-spec":{"RETURN":[["RETURN","type"]],"LBR":[[]]},"brace-block":{"LBR":[["LBR","var-decl-list","stmts","RBR"]]},"type-list":{"RP":[[]],"ID":[["ID","type","type-list'"]]},"type-list'":{"CMA":[["CMA","ID","type","type-list'"]],"RP":[[]]},"type":{"NUMBER":[["non-array-type"],["non-array-type","LB","size-list","RB"]],"STRING":[["non-array-type"],["non-array-type","LB","size-list","RB"]]},"non-array-type":{"NUMBER":[["NUMBER"]],"STRING":[["STRING"]]},"size-list":{"NUM":[["NUM"],["NUM","CMA","size-list"]]},"stmts":{"ID":[["stmt","SEMI","stmts"]],"WHILE":[["stmt","SEMI","stmts"]],"IF":[["stmt","SEMI","stmts"]],"RETURN":[["stmt","SEMI","stmts"]],"PRINT":[["stmt","SEMI","stmts"]],"SHIFT":[["stmt","SEMI","stmts"]],"RBR":[[]]},"stmt":{"ID":[["assign","SEMI"],["func-call","SEMI"]],"PRINT":[["func-call","SEMI"]],"SHIFT":[["func-call","SEMI"]],"WHILE":[["loop"]],"IF":[["cond"]],"RETURN":[["return-stmt","SEMI"]]},"return-stmt":{"RETURN":[["RETURN"],["RETURN","expr"]]},"func-call":{"ID":[["ID","LP","optional-expr-list","RP"]],"PRINT":[["builtin-func-call"]],"SHIFT":[["builtin-func-call"]]},"builtin-func-call":{"PRINT":[["PRINT","LP","expr-list","RP"]],"SHIFT":[["SHIFT","LP","expr","CMA","expr","RP"]]},"optional-expr-list":{"RP":[[]],"NOT":[["expr-list"]],"MINUS":[["expr-list"]],"ID":[["expr-list"]],"NUM":[["expr-list"]],"LP":[["expr-list"]],"STRING-CONSTANT":[["expr-list"]],"PRINT":[["expr-list"]],"SHIFT":[["expr-list"]]},"expr-list":{"NOT":[["expr","expr-list'"]],"MINUS":[["expr","expr-list'"]],"ID":[["expr","expr-list'"]],"NUM":[["expr","expr-list'"]],"LP":[["expr","expr-list'"]],"STRING-CONSTANT":[["expr","expr-list'"]],"PRINT":[["expr","expr-list'"]],"SHIFT":[["expr","expr-list'"]]},"expr-list'":{"RP":[[]],"RB":[[]],"CMA":[["CMA","expr","expr-list'"]]},"loop":{"WHILE":[["WHILE","LP","expr","RP","brace-block"]]},"cond":{"IF":[["IF","expr","brace-block"],["IF","expr","brace-block","ELSE","brace-block"]]},"var-decl-list":{"VAR":[["var-decl","SEMI","var-decl-list"]],"DEF":[[]],"$":[[]],"ID":[[]],"WHILE":[[]],"IF":[[]],"RETURN":[[]],"PRINT":[[]],"SHIFT":[[]],"RBR":[[]]},"var-decl":{"VAR":[["VAR","ID","type"]]},"expr":{"NOT":[["orexp"]],"MINUS":[["orexp"]],"ID":[["orexp"]],"NUM":[["orexp"]],"LP":[["orexp"]],"STRING-CONSTANT":[["orexp"]],"PRINT":[["orexp"]],"SHIFT":[["orexp"]]},"orexp":{"NOT":[["orexp","OR","andexp"],["andexp"]],"MINUS":[["orexp","OR","andexp"],["andexp"]],"ID":[["orexp","OR","andexp"],["andexp"]],"NUM":[["orexp","OR","andexp"],["andexp"]],"LP":[["orexp","OR","andexp"],["andexp"]],"STRING-CONSTANT":[["orexp","OR","andexp"],["andexp"]],"PRINT":[["orexp","OR","andexp"],["andexp"]],"SHIFT":[["orexp","OR","andexp"],["andexp"]]},"andexp":{"NOT":[["andexp","AND","notexp"],["notexp"]],"MINUS":[["andexp","AND","notexp"],["notexp"]],"ID":[["andexp","AND","notexp"],["notexp"]],"NUM":[["andexp","AND","notexp"],["notexp"]],"LP":[["andexp","AND","notexp"],["notexp"]],"STRING-CONSTANT":[["andexp","AND","notexp"],["notexp"]],"PRINT":[["andexp","AND","notexp"],["notexp"]],"SHIFT":[["andexp","AND","notexp"],["notexp"]]},"notexp":{"NOT":[["NOT","notexp"]],"MINUS":[["rel"]],"ID":[["rel"]],"NUM":[["rel"]],"LP":[["rel"]],"STRING-CONSTANT":[["rel"]],"PRINT":[["rel"]],"SHIFT":[["rel"]]},"rel":{"MINUS":[["sum","RELOP","sum"],["sum"]],"ID":[["sum","RELOP","sum"],["sum"]],"NUM":[["sum","RELOP","sum"],["sum"]],"LP":[["sum","RELOP","sum"],["sum"]],"STRING-CONSTANT":[["sum","RELOP","sum"],["sum"]],"PRINT":[["sum","RELOP","sum"],["sum"]],"SHIFT":[["sum","RELOP","sum"],["sum"]]},"sum":{"MINUS":[["sum","ADDOP","term"],["sum","MINUS","term"],["term"]],"ID":[["sum","ADDOP","term"],["sum","MINUS","term"],["term"]],"NUM":[["sum","ADDOP","term"],["sum","MINUS","term"],["term"]],"LP":[["sum","ADDOP","term"],["sum","MINUS","term"],["term"]],"STRING-CONSTANT":[["sum","ADDOP","term"],["sum","MINUS","term"],["term"]],"PRINT":[["sum","ADDOP","term"],["sum","MINUS","term"],["term"]],"SHIFT":[["sum","ADDOP","term"],["sum","MINUS","term"],["term"]]},"term":{"MINUS":[["term","MULOP","neg"],["neg"]],"ID":[["term","MULOP","neg"],["neg"]],"NUM":[["term","MULOP","neg"],["neg"]],"LP":[["term","MULOP","neg"],["neg"]],"STRING-CONSTANT":[["term","MULOP","neg"],["neg"]],"PRINT":[["term","MULOP","neg"],["neg"]],"SHIFT":[["term","MULOP","neg"],["neg"]]},"neg":{"MINUS":[["MINUS","neg"]],"ID":[["factor"]],"NUM":[["factor"]],"LP":[["factor"]],"STRING-CONSTANT":[["factor"]],"PRINT":[["factor"]],"SHIFT":[["factor"]]},"factor":{"ID":[["ID"],["func-call"],["ID","LB","expr-list","RB"]],"NUM":[["NUM"]],"LP":[["LP","expr","RP"]],"PRINT":[["func-call"]],"SHIFT":[["func-call"]],"STRING-CONSTANT":[["STRING-CONSTANT"]]},"assign":{"ID":[["ID","EQ","expr"]]}},"nonterminals":["program","func-decl-list","func-decl","optional-return-spec","brace-block","type-list","type-list'","type","non-array-type","size-list","stmts","stmt","return-stmt","func-call","builtin-func-call","optional-expr-list","expr-list","expr-list'","loop","cond","var-decl-list","var-decl","expr","orexp","andexp","notexp","rel","sum","term","neg","factor","assign"],"terminals":["ADDOP","AND","CMA","COMMENT","DEF","ELSE","EQ","IF","LB","LBR","LP","MINUS","MULOP","NOT","NUM","NUMBER","OR","PRINT","RB","RBR","RP","RELOP","RETURN","SEMI","SHIFT","STRING","STRING-CONSTANT","VAR","WHILE","ID","WHITESPACE"]},{"name":"g7.txt","grammarSpec":"+ -> [-+]\n* -> [*/]\n( -> [(]\n) -> [)]\nNUM -> \\d+\n\nS -> e\ne -> e + e | t\nt -> t * t | f\nf -> NUM | ( e )\n","table":{"S":{"NUM":[["e"]],"(":[["e"]]},"e":{"NUM":[["e","+","e"],["t"]],"(":[["e","+","e"],["t"]]},"t":{"NUM":[["t","*","t"],["f"]],"(":[["t","*","t"],["f"]]},"f":{"NUM":[["NUM"]],"(":[["(","e",")"]]}},"nonterminals":["S","e","t","f"],"terminals":["+","*","(",")","NUM","WHITESPACE"]},{"name":"g8.txt","grammarSpec":"ADDOP -> [-+]\nMULOP -> [*/]\nNUM -> \\d+\nLP -> [(]\nRP -> [)]\nID -> \\w+\n\n\nS -> expr \nexpr -> term expr'\nexpr' -> ADDOP term expr' | lambda\nterm -> factor term'\nterm' -> MULOP factor term' | lambda\nfactor -> id_or_func_call | NUM | LP expr RP\nid_or_func_call -> ID id_or_func_call'\nid_or_func_call' -> lambda | LP RP\n","table":{"S":{"NUM":[["expr"]],"LP":[["expr"]],"ID":[["expr"]]},"expr":{"NUM":[["term","expr'"]],"LP":[["term","expr'"]],"ID":[["term","expr'"]]},"expr'":{"ADDOP":[["ADDOP","term","expr'"]],"$":[[]],"RP":[[]]},"term":{"NUM":[["factor","term'"]],"LP":[["factor","term'"]],"ID":[["factor","term'"]]},"term'":{"MULOP":[["MULOP","factor","term'"]],"ADDOP":[[]],"$":[[]],"RP":[[]]},"factor":{"ID":[["id_or_func_call"]],"NUM":[["NUM"]],"LP":[["LP","expr","RP"]]},"id_or_func_call":{"ID":[["ID","id_or_func_call'"]]},"id_or_func_call'":{"MULOP":[[]],"ADDOP":[[]],"$":[[]],"RP":[[]],"LP":[["LP","RP"]]}},"nonterminals":["S","expr","expr'","term","term'","factor","id_or_func_call","id_or_func_call'"],"terminals":["ADDOP","MULOP","NUM","LP","RP","ID","WHITESPACE"]},{"name":"g9.txt","grammarSpec":"x -> x\n\nS -> lambda | S S | x\n","table":{"S":{"$":[[],["S","S"]],"x":[[],["S","S"],["x"]]}},"nonterminals":["S"],"terminals":["x","WHITESPACE"]}]