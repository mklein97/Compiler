grammar gram;
COMMENT : ('/*' .*? '*/' | '//'~[\n]*) -> skip;
WHITESPACE : [ \t\r\n]+ -> skip;
SEMI : ';' ;
IF : 'if' ;
ELSE : 'else' ;
WHILE : 'while' ;
EQ : '=' ;
LP : '(' ;
RP : ')' ;
LBR : '{' ;
RBR : '}' ;
CMA : ',' ;
RETURN : 'return';
FPNUM : ([0-9]+'.'[0-9]*|'.'[0-9]+)([Ee][-+]?[0-9]+)?|'-'?[0-9]+[Ee][-+]?[0-9]+;
NUM : [0-9]+ | '-' [0-9]+ ;
OR : 'or';
AND : 'and';
NOT : 'not';
RELOP : '>='|'<='|'>'|'<'|'!='|'==';
PLUS : [+];
MULOP : [*/] ;
MINUS : '-';
TYPE : 'int'|'string'|'double';
STRINGCONST : '"' ( '\\"' | ~["] )* '"';
PRINT : 'print';
INPUT : 'input';
OPEN : 'open';
READ : 'read';
WRITE : 'write';
CLOSE : 'close';
ID : [A-Za-z_][A-Za-z_0-9]* ;

program : varDecllist braceBlock;
stmts : stmt stmts | ;
stmt : cond | loop | returnStmt SEMI | assign SEMI | funcCall SEMI;
loop : WHILE LP expr RP braceBlock;
cond : IF LP expr RP braceBlock | IF LP expr RP braceBlock ELSE braceBlock;
braceBlock : LBR stmts RBR;
returnStmt : 'return' expr ';';
expr : orexp;
orexp : orexp OR andexp | andexp ;
andexp : andexp AND notexp | notexp;
notexp :  NOT notexp | rel;
rel : sum RELOP sum | sum;
sum :  sum PLUS term | sum MINUS term | term;
term :  term MULOP neg | neg;
neg :  MINUS neg | factor;
factor :  NUM | LP expr RP | FPNUM | ID | STRINGCONST | funcCall;
varDecllist : varDecl SEMI varDecllist | ;
varDecl : TYPE ID;
assign : ID EQ expr;
funcCall : builtinFuncCall | userFuncCall;
userFuncCall : ID LP optionalExprlist RP;
optionalExprlist :  | exprlist;
exprlist : exprlist CMA expr | expr;
builtinFuncCall : PRINT LP expr RP | INPUT LP RP | OPEN LP expr RP | READ LP expr RP | WRITE LP expr CMA expr RP | CLOSE LP expr RP;

