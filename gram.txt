grammar gram;
COMMENT : ('/*' .*? '*/' | '//'~[\n]*) -> skip;
WHITESPACE : [ \t\r\n]+ -> skip;
SEMI : ';' ;
IF : 'if' ;
ELSE : 'else' ;
WHILE : 'while' ;
EQ : '=' ;
LP : '(' ;
RP : ')' ;
LBR : '{' ;
RBR : '}' ;
CMA : ',' ;
RETURN : 'return';
FPNUM : ([0-9]+'.'[0-9]*|'.'[0-9]+)([Ee][-+]?[0-9]+)?|'-'?[0-9]+[Ee][-+]?[0-9]+;
NUM : [0-9]+ | '-' [0-9]+ ;
OR : 'or';
AND : 'and';
NOT : 'not';
RELOP : '>='|'<='|'>'|'<'|'!='|'==';
PLUS : [+];
MULOP : [*/] ;
MINUS : '-';
TYPE : 'int'|'string'|'double';
STRINGCONST : '"' ( '\\"' | ~["] )* '"';
PRINT : 'print';
INPUT : 'input';
OPEN : 'open';
READ : 'read';
WRITE : 'write';
CLOSE : 'close';
ID : [A-Za-z_][A-Za-z_0-9]* ;

program : braceblock ;
stmts : stmt stmts | ;
stmt : cond | loop | returnStmt SEMI ;
cond : IF LP expr RP braceblock | IF LP expr RP braceblock ELSE braceblock ;
braceblock : LBR stmts RBR ;
expr : NUM ;
loop : WHILE LP expr RP braceblock;
returnStmt : RETURN expr ;